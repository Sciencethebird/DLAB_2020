`timescale 1ns / 1ps
/////////////////////////////////////////////////////////
module lab5(
  input clk,
  input reset_n,
  input [3:0] usr_btn,
  output [3:0] usr_led,
  output LCD_RS,
  output LCD_RW,
  output LCD_E,
  output [3:0] LCD_D
);



wire btn_level, btn_pressed;
reg prev_btn_level;
reg [127:0] row_A = "Press BTN3 to   "; // Initialize the text of the first row. 
reg [127:0] row_B = "show a message.."; // Initialize the text of the second row.
//lab FSM
parameter  Q_IDLE = 2'b00;
parameter Q_FIBO = 2'b01; 
parameter Q_DISP = 2'b10;
reg [1:0] Q,Q_next;
integer counter = 2;
//FIBO
reg [16-1:0] fibo [1:25]; 
// turn off all the LEDs
assign usr_led = {2'b11,Q};
//DISP
reg [27:0] delay_cnt;
reg [7:0] display_idx;
reg reverse;
reg [7:0] data[0:5];

LCD_module lcd0(
  .clk(clk),
  .reset(~reset_n),
  .row_A(row_A),
  .row_B(row_B),
  .LCD_E(LCD_E),
  .LCD_RS(LCD_RS),
  .LCD_RW(LCD_RW),
  .LCD_D(LCD_D)
);
    
debounce btn_db0(
  .clk(clk),
  .btn_input(usr_btn[3]),
  .btn_output(btn_level)
);
    
always @(posedge clk) begin
  if (~reset_n)
    prev_btn_level <= 1;
  else
    prev_btn_level <= btn_level;
end

assign btn_pressed = (btn_level == 1 && prev_btn_level == 0);

always @(posedge clk) begin
  if (~reset_n) begin
    // Initialize the text when the user hit the reset button
    row_A = "Press BTN3 to   ";
    row_B = "show a message..";
  end else if (Q == Q_DISP && delay_cnt == 70000000 && reverse) begin
    row_A <= {"Fibo #",data[0],data[1]," is ",data[2],data[3],data[4],data[5]};
    row_B <= row_A;    
  end else if (Q == Q_DISP && delay_cnt == 70000000 && !reverse) begin
    row_A <= row_B;
    row_B <= {"Fibo #",data[0],data[1]," is ",data[2],data[3],data[4],data[5]};
  end
end

//lab5 FSM
always@(posedge clk)begin
    if(~reset_n)
        Q <= Q_IDLE;
    else
        Q <= Q_next;
end

always@(*)begin
    case(Q)
        Q_IDLE: Q_next = Q_FIBO;
        Q_FIBO: Q_next = (counter < 25) ? Q_FIBO : Q_DISP;
        Q_DISP: Q_next = Q_DISP;
        default: Q_next = Q_next; 
    endcase
end

//IDLE
always@(posedge clk)begin
    if(Q==Q_IDLE || ~reset_n)begin
    fibo[1] <= 16'b0;
    fibo[2] <= 16'b1;
    end
end
//FIBO
always@(posedge clk)begin
    if(~reset_n)begin
        counter <= 2;
    end
    if(Q==Q_FIBO)
        counter <= (counter < 25) ? counter+1 : counter  ; 
end


always@(posedge clk)begin
    if(counter <= 25)
        fibo[counter] <= fibo[counter-1] + fibo[counter-2];
end


always@(posedge clk)begin
    if(~reset_n)
    delay_cnt <= 28'b1;
    else if(Q == Q_DISP) 
        delay_cnt = (delay_cnt == 70000001) ? 1 : delay_cnt + 1 ;
end

always@(posedge clk)begin
    if(~reset_n)
    reverse <= 1'b0;
    else if(btn_pressed)
    reverse <= ~reverse;
end

assign counter_rem = counter-1;
always@(posedge clk)begin
    if(~reset_n)
    display_idx <= 1;
    else if(btn_pressed && !reverse)
        display_idx <= (display_idx -3 + counter_rem <= counter_rem) ? display_idx-3 + counter_rem : display_idx-3 ;
    else if(btn_pressed && reverse)
        display_idx <= (display_idx+3 >= counter_rem) ? display_idx+3-counter_rem : display_idx+3;
    else if(delay_cnt == 70000001 && !reverse)
        display_idx <= (display_idx==25) ? 1 : display_idx+1 ;
     else if(delay_cnt == 70000001 && reverse)
        display_idx <= (display_idx==1) ? 25 : display_idx-1 ;
end

always@(*)begin
    data[0] = display_idx[7:4] + 48;
    data[1] = (display_idx[3:0] < 10 ) ? display_idx [3:0] + 48 : display_idx[3:0] + 55;
    data[2] = (fibo[display_idx][15:12] < 10) ? fibo[display_idx][15:12] + 48 : fibo[display_idx][15:12] + 55 ;
    data[3] = (fibo[display_idx][11:8] < 10) ? fibo[display_idx][11:8] + 48 : fibo[display_idx][11:8] + 55;
    data[4] = (fibo[display_idx][7:4] < 10) ? fibo[display_idx][7:4] + 48 : fibo[display_idx][7:4] + 55;
    data[5] = (fibo[display_idx][3:0] < 10) ? fibo[display_idx][3:0] + 48 : fibo[display_idx][3:0] + 55;
end



endmodule

